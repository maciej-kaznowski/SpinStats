/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.maciej.kaznowski.intervalsicuclient.model

import com.github.maciej.kaznowski.intervalsicuclient.model.Attachment
import com.github.maciej.kaznowski.intervalsicuclient.model.PushError
import com.github.maciej.kaznowski.intervalsicuclient.model.Workout

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id 
 * @param startDateLocal 
 * @param icuTrainingLoad 
 * @param icuAtl 
 * @param icuCtl 
 * @param type 
 * @param calendarId 
 * @param uid 
 * @param athleteId 
 * @param category 
 * @param endDateLocal 
 * @param name 
 * @param description 
 * @param indoor 
 * @param color 
 * @param movingTime 
 * @param icuFtp 
 * @param atlDays 
 * @param ctlDays 
 * @param updated 
 * @param notOnFitnessChart 
 * @param showAsNote 
 * @param showOnCtlLine 
 * @param target 
 * @param joules 
 * @param joulesAboveFtp 
 * @param workoutDoc 
 * @param pushErrors 
 * @param athleteCannotEdit 
 * @param hideFromAthlete 
 * @param structureReadOnly 
 * @param createdById 
 * @param sharedEventId 
 * @param entered 
 * @param tags 
 * @param attachments 
 * @param oauthClientId 
 * @param externalId 
 * @param loadTarget 
 * @param timeTarget 
 * @param distanceTarget 
 * @param planAthleteId 
 * @param planFolderId 
 * @param planWorkoutId 
 * @param planApplied 
 * @param workout 
 * @param fileContents 
 * @param fileContentsBase64 
 * @param filename 
 * @param distance 
 * @param icuIntensity 
 */
@JsonClass(generateAdapter = true)

data class EventEx (

    @Json(name = "id")
    val id: kotlin.Int? = null,

    @Json(name = "start_date_local")
    val startDateLocal: kotlin.String? = null,

    @Json(name = "icu_training_load")
    val icuTrainingLoad: kotlin.Int? = null,

    @Json(name = "icu_atl")
    val icuAtl: kotlin.Float? = null,

    @Json(name = "icu_ctl")
    val icuCtl: kotlin.Float? = null,

    @Json(name = "type")
    val type: kotlin.String? = null,

    @Json(name = "calendar_id")
    val calendarId: kotlin.Int? = null,

    @Json(name = "uid")
    val uid: kotlin.String? = null,

    @Json(name = "athlete_id")
    val athleteId: kotlin.String? = null,

    @Json(name = "category")
    val category: EventEx.Category? = null,

    @Json(name = "end_date_local")
    val endDateLocal: kotlin.String? = null,

    @Json(name = "name")
    val name: kotlin.String? = null,

    @Json(name = "description")
    val description: kotlin.String? = null,

    @Json(name = "indoor")
    val indoor: kotlin.Boolean? = null,

    @Json(name = "color")
    val color: kotlin.String? = null,

    @Json(name = "moving_time")
    val movingTime: kotlin.Int? = null,

    @Json(name = "icu_ftp")
    val icuFtp: kotlin.Int? = null,

    @Json(name = "atl_days")
    val atlDays: kotlin.Int? = null,

    @Json(name = "ctl_days")
    val ctlDays: kotlin.Int? = null,

    @Json(name = "updated")
    val updated: java.time.OffsetDateTime? = null,

    @Json(name = "not_on_fitness_chart")
    val notOnFitnessChart: kotlin.Boolean? = null,

    @Json(name = "show_as_note")
    val showAsNote: kotlin.Boolean? = null,

    @Json(name = "show_on_ctl_line")
    val showOnCtlLine: kotlin.Boolean? = null,

    @Json(name = "target")
    val target: EventEx.Target? = null,

    @Json(name = "joules")
    val joules: kotlin.Int? = null,

    @Json(name = "joules_above_ftp")
    val joulesAboveFtp: kotlin.Int? = null,

    @Json(name = "workout_doc")
    val workoutDoc: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    @Json(name = "push_errors")
    val pushErrors: kotlin.collections.List<PushError>? = null,

    @Json(name = "athlete_cannot_edit")
    val athleteCannotEdit: kotlin.Boolean? = null,

    @Json(name = "hide_from_athlete")
    val hideFromAthlete: kotlin.Boolean? = null,

    @Json(name = "structure_read_only")
    val structureReadOnly: kotlin.Boolean? = null,

    @Json(name = "created_by_id")
    val createdById: kotlin.String? = null,

    @Json(name = "shared_event_id")
    val sharedEventId: kotlin.Int? = null,

    @Json(name = "entered")
    val entered: kotlin.Boolean? = null,

    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "attachments")
    val attachments: kotlin.collections.List<Attachment>? = null,

    @Json(name = "oauth_client_id")
    val oauthClientId: kotlin.Int? = null,

    @Json(name = "external_id")
    val externalId: kotlin.String? = null,

    @Json(name = "load_target")
    val loadTarget: kotlin.Int? = null,

    @Json(name = "time_target")
    val timeTarget: kotlin.Int? = null,

    @Json(name = "distance_target")
    val distanceTarget: kotlin.Float? = null,

    @Json(name = "plan_athlete_id")
    val planAthleteId: kotlin.String? = null,

    @Json(name = "plan_folder_id")
    val planFolderId: kotlin.Int? = null,

    @Json(name = "plan_workout_id")
    val planWorkoutId: kotlin.Int? = null,

    @Json(name = "plan_applied")
    val planApplied: java.time.OffsetDateTime? = null,

    @Json(name = "workout")
    val workout: Workout? = null,

    @Json(name = "file_contents")
    val fileContents: kotlin.String? = null,

    @Json(name = "file_contents_base64")
    val fileContentsBase64: kotlin.String? = null,

    @Json(name = "filename")
    val filename: kotlin.String? = null,

    @Json(name = "distance")
    val distance: kotlin.Float? = null,

    @Json(name = "icu_intensity")
    val icuIntensity: kotlin.Float? = null

) {

    /**
     * 
     *
     * Values: WORKOUT,RACE_A,RACE_B,RACE_C,NOTE,HOLIDAY,SICK,INJURED,SET_EFTP,FITNESS_DAYS,SEASON_START,TARGET,SET_FITNESS
     */
    @JsonClass(generateAdapter = false)
    enum class Category(val value: kotlin.String) {
        @Json(name = "WORKOUT") WORKOUT("WORKOUT"),
        @Json(name = "RACE_A") RACE_A("RACE_A"),
        @Json(name = "RACE_B") RACE_B("RACE_B"),
        @Json(name = "RACE_C") RACE_C("RACE_C"),
        @Json(name = "NOTE") NOTE("NOTE"),
        @Json(name = "HOLIDAY") HOLIDAY("HOLIDAY"),
        @Json(name = "SICK") SICK("SICK"),
        @Json(name = "INJURED") INJURED("INJURED"),
        @Json(name = "SET_EFTP") SET_EFTP("SET_EFTP"),
        @Json(name = "FITNESS_DAYS") FITNESS_DAYS("FITNESS_DAYS"),
        @Json(name = "SEASON_START") SEASON_START("SEASON_START"),
        @Json(name = "TARGET") TARGET("TARGET"),
        @Json(name = "SET_FITNESS") SET_FITNESS("SET_FITNESS");
    }
    /**
     * 
     *
     * Values: AUTO,POWER,HR,PACE
     */
    @JsonClass(generateAdapter = false)
    enum class Target(val value: kotlin.String) {
        @Json(name = "AUTO") AUTO("AUTO"),
        @Json(name = "POWER") POWER("POWER"),
        @Json(name = "HR") HR("HR"),
        @Json(name = "PACE") PACE("PACE");
    }
}

