/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.maciej.kaznowski.intervalsicuclient.model

import com.github.maciej.kaznowski.intervalsicuclient.model.ActivityCharts
import com.github.maciej.kaznowski.intervalsicuclient.model.Display
import com.github.maciej.kaznowski.intervalsicuclient.model.PowerModel

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id 
 * @param athleteId 
 * @param types 
 * @param warmupTime 
 * @param cooldownTime 
 * @param ftp 
 * @param indoorFtp 
 * @param wPrime 
 * @param powerZones 
 * @param sweetSpotMin 
 * @param sweetSpotMax 
 * @param powerSpikeThreshold 
 * @param powerZoneNames 
 * @param ftpEstMinSecs 
 * @param useLapsForPowerIntervals 
 * @param keepAllLapsForPowerIntervals 
 * @param afterKj0 
 * @param afterKj1 
 * @param powerField 
 * @param lthr 
 * @param maxHr 
 * @param hrZones 
 * @param hrZoneNames 
 * @param hrLoadType 
 * @param hrrcMinPercent 
 * @param thresholdPace 
 * @param paceUnits 
 * @param paceZones 
 * @param paceZoneNames 
 * @param paceLoadType 
 * @param gapModel 
 * @param elevationCorrection 
 * @param useGapZoneTimes 
 * @param bestEffortDistances 
 * @param paceCurveStart 
 * @param loadOrder 
 * @param tizOrder 
 * @param workoutOrder 
 * @param intervalDisplay 
 * @param defaultGearId 
 * @param defaultIndoorGearId 
 * @param extractWorkouts 
 * @param showPauses 
 * @param ignoreVelocity 
 * @param created 
 * @param updated 
 * @param mmpModel 
 * @param display 
 * @param activityFieldIds 
 * @param activityCharts 
 * @param other 
 * @param iseFTPSupported 
 * @param useDistanceForIntervals 
 */
@JsonClass(generateAdapter = true)

data class SportSettings (

    @Json(name = "id")
    val id: kotlin.Int? = null,

    @Json(name = "athlete_id")
    val athleteId: kotlin.String? = null,

    @Json(name = "types")
    val types: kotlin.collections.List<SportSettings.Types>? = null,

    @Json(name = "warmup_time")
    val warmupTime: kotlin.Int? = null,

    @Json(name = "cooldown_time")
    val cooldownTime: kotlin.Int? = null,

    @Json(name = "ftp")
    val ftp: kotlin.Int? = null,

    @Json(name = "indoor_ftp")
    val indoorFtp: kotlin.Int? = null,

    @Json(name = "w_prime")
    val wPrime: kotlin.Int? = null,

    @Json(name = "power_zones")
    val powerZones: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "sweet_spot_min")
    val sweetSpotMin: kotlin.Int? = null,

    @Json(name = "sweet_spot_max")
    val sweetSpotMax: kotlin.Int? = null,

    @Json(name = "power_spike_threshold")
    val powerSpikeThreshold: kotlin.Int? = null,

    @Json(name = "power_zone_names")
    val powerZoneNames: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "ftp_est_min_secs")
    val ftpEstMinSecs: kotlin.Int? = null,

    @Json(name = "use_laps_for_power_intervals")
    val useLapsForPowerIntervals: kotlin.Boolean? = null,

    @Json(name = "keep_all_laps_for_power_intervals")
    val keepAllLapsForPowerIntervals: kotlin.Boolean? = null,

    @Json(name = "after_kj0")
    val afterKj0: kotlin.Int? = null,

    @Json(name = "after_kj1")
    val afterKj1: kotlin.Int? = null,

    @Json(name = "power_field")
    val powerField: kotlin.String? = null,

    @Json(name = "lthr")
    val lthr: kotlin.Int? = null,

    @Json(name = "max_hr")
    val maxHr: kotlin.Int? = null,

    @Json(name = "hr_zones")
    val hrZones: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "hr_zone_names")
    val hrZoneNames: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "hr_load_type")
    val hrLoadType: SportSettings.HrLoadType? = null,

    @Json(name = "hrrc_min_percent")
    val hrrcMinPercent: kotlin.Float? = null,

    @Json(name = "threshold_pace")
    val thresholdPace: kotlin.Float? = null,

    @Json(name = "pace_units")
    val paceUnits: SportSettings.PaceUnits? = null,

    @Json(name = "pace_zones")
    val paceZones: kotlin.collections.List<kotlin.Float>? = null,

    @Json(name = "pace_zone_names")
    val paceZoneNames: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "pace_load_type")
    val paceLoadType: SportSettings.PaceLoadType? = null,

    @Json(name = "gap_model")
    val gapModel: SportSettings.GapModel? = null,

    @Json(name = "elevation_correction")
    val elevationCorrection: SportSettings.ElevationCorrection? = null,

    @Json(name = "use_gap_zone_times")
    val useGapZoneTimes: kotlin.Boolean? = null,

    @Json(name = "best_effort_distances")
    val bestEffortDistances: kotlin.collections.List<kotlin.Float>? = null,

    @Json(name = "pace_curve_start")
    val paceCurveStart: kotlin.Float? = null,

    @Json(name = "load_order")
    val loadOrder: SportSettings.LoadOrder? = null,

    @Json(name = "tiz_order")
    val tizOrder: SportSettings.TizOrder? = null,

    @Json(name = "workout_order")
    val workoutOrder: SportSettings.WorkoutOrder? = null,

    @Json(name = "interval_display")
    val intervalDisplay: SportSettings.IntervalDisplay? = null,

    @Json(name = "default_gear_id")
    val defaultGearId: kotlin.String? = null,

    @Json(name = "default_indoor_gear_id")
    val defaultIndoorGearId: kotlin.String? = null,

    @Json(name = "extract_workouts")
    val extractWorkouts: kotlin.Boolean? = null,

    @Json(name = "show_pauses")
    val showPauses: kotlin.Int? = null,

    @Json(name = "ignore_velocity")
    val ignoreVelocity: kotlin.Boolean? = null,

    @Json(name = "created")
    val created: java.time.OffsetDateTime? = null,

    @Json(name = "updated")
    val updated: java.time.OffsetDateTime? = null,

    @Json(name = "mmp_model")
    val mmpModel: PowerModel? = null,

    @Json(name = "display")
    val display: Display? = null,

    @Json(name = "activity_field_ids")
    val activityFieldIds: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "activity_charts")
    val activityCharts: ActivityCharts? = null,

    @Json(name = "other")
    val other: kotlin.Boolean? = null,

    @Json(name = "iseFTPSupported")
    val iseFTPSupported: kotlin.Boolean? = null,

    @Json(name = "use_distance_for_intervals")
    val useDistanceForIntervals: kotlin.Boolean? = null

) {

    /**
     * 
     *
     * Values: RIDE,RUN,SWIM,WEIGHT_TRAINING,HIKE,WALK,ALPINE_SKI,BACKCOUNTRY_SKI,BADMINTON,CANOEING,CROSSFIT,E_BIKE_RIDE,E_MOUNTAIN_BIKE_RIDE,ELLIPTICAL,GOLF,GRAVEL_RIDE,HANDCYCLE,HIGH_INTENSITY_INTERVAL_TRAINING,HOCKEY,ICE_SKATE,INLINE_SKATE,KAYAKING,KITESURF,MOUNTAIN_BIKE_RIDE,NORDIC_SKI,OPEN_WATER_SWIM,PADEL,PILATES,PICKLEBALL,RACQUETBALL,RUGBY,ROCK_CLIMBING,ROLLER_SKI,ROWING,SAIL,SKATEBOARD,SNOWBOARD,SNOWSHOE,SOCCER,SQUASH,STAIR_STEPPER,STAND_UP_PADDLING,SURFING,TABLE_TENNIS,TENNIS,TRAIL_RUN,TRANSITION,VELOMOBILE,VIRTUAL_RIDE,VIRTUAL_ROW,VIRTUAL_RUN,WATER_SPORT,WHEELCHAIR,WINDSURF,WORKOUT,YOGA,OTHER
     */
    @JsonClass(generateAdapter = false)
    enum class Types(val value: kotlin.String) {
        @Json(name = "Ride") RIDE("Ride"),
        @Json(name = "Run") RUN("Run"),
        @Json(name = "Swim") SWIM("Swim"),
        @Json(name = "WeightTraining") WEIGHT_TRAINING("WeightTraining"),
        @Json(name = "Hike") HIKE("Hike"),
        @Json(name = "Walk") WALK("Walk"),
        @Json(name = "AlpineSki") ALPINE_SKI("AlpineSki"),
        @Json(name = "BackcountrySki") BACKCOUNTRY_SKI("BackcountrySki"),
        @Json(name = "Badminton") BADMINTON("Badminton"),
        @Json(name = "Canoeing") CANOEING("Canoeing"),
        @Json(name = "Crossfit") CROSSFIT("Crossfit"),
        @Json(name = "EBikeRide") E_BIKE_RIDE("EBikeRide"),
        @Json(name = "EMountainBikeRide") E_MOUNTAIN_BIKE_RIDE("EMountainBikeRide"),
        @Json(name = "Elliptical") ELLIPTICAL("Elliptical"),
        @Json(name = "Golf") GOLF("Golf"),
        @Json(name = "GravelRide") GRAVEL_RIDE("GravelRide"),
        @Json(name = "Handcycle") HANDCYCLE("Handcycle"),
        @Json(name = "HighIntensityIntervalTraining") HIGH_INTENSITY_INTERVAL_TRAINING("HighIntensityIntervalTraining"),
        @Json(name = "Hockey") HOCKEY("Hockey"),
        @Json(name = "IceSkate") ICE_SKATE("IceSkate"),
        @Json(name = "InlineSkate") INLINE_SKATE("InlineSkate"),
        @Json(name = "Kayaking") KAYAKING("Kayaking"),
        @Json(name = "Kitesurf") KITESURF("Kitesurf"),
        @Json(name = "MountainBikeRide") MOUNTAIN_BIKE_RIDE("MountainBikeRide"),
        @Json(name = "NordicSki") NORDIC_SKI("NordicSki"),
        @Json(name = "OpenWaterSwim") OPEN_WATER_SWIM("OpenWaterSwim"),
        @Json(name = "Padel") PADEL("Padel"),
        @Json(name = "Pilates") PILATES("Pilates"),
        @Json(name = "Pickleball") PICKLEBALL("Pickleball"),
        @Json(name = "Racquetball") RACQUETBALL("Racquetball"),
        @Json(name = "Rugby") RUGBY("Rugby"),
        @Json(name = "RockClimbing") ROCK_CLIMBING("RockClimbing"),
        @Json(name = "RollerSki") ROLLER_SKI("RollerSki"),
        @Json(name = "Rowing") ROWING("Rowing"),
        @Json(name = "Sail") SAIL("Sail"),
        @Json(name = "Skateboard") SKATEBOARD("Skateboard"),
        @Json(name = "Snowboard") SNOWBOARD("Snowboard"),
        @Json(name = "Snowshoe") SNOWSHOE("Snowshoe"),
        @Json(name = "Soccer") SOCCER("Soccer"),
        @Json(name = "Squash") SQUASH("Squash"),
        @Json(name = "StairStepper") STAIR_STEPPER("StairStepper"),
        @Json(name = "StandUpPaddling") STAND_UP_PADDLING("StandUpPaddling"),
        @Json(name = "Surfing") SURFING("Surfing"),
        @Json(name = "TableTennis") TABLE_TENNIS("TableTennis"),
        @Json(name = "Tennis") TENNIS("Tennis"),
        @Json(name = "TrailRun") TRAIL_RUN("TrailRun"),
        @Json(name = "Transition") TRANSITION("Transition"),
        @Json(name = "Velomobile") VELOMOBILE("Velomobile"),
        @Json(name = "VirtualRide") VIRTUAL_RIDE("VirtualRide"),
        @Json(name = "VirtualRow") VIRTUAL_ROW("VirtualRow"),
        @Json(name = "VirtualRun") VIRTUAL_RUN("VirtualRun"),
        @Json(name = "WaterSport") WATER_SPORT("WaterSport"),
        @Json(name = "Wheelchair") WHEELCHAIR("Wheelchair"),
        @Json(name = "Windsurf") WINDSURF("Windsurf"),
        @Json(name = "Workout") WORKOUT("Workout"),
        @Json(name = "Yoga") YOGA("Yoga"),
        @Json(name = "Other") OTHER("Other");
    }
    /**
     * 
     *
     * Values: AVG_HR,HR_ZONES,HRSS
     */
    @JsonClass(generateAdapter = false)
    enum class HrLoadType(val value: kotlin.String) {
        @Json(name = "AVG_HR") AVG_HR("AVG_HR"),
        @Json(name = "HR_ZONES") HR_ZONES("HR_ZONES"),
        @Json(name = "HRSS") HRSS("HRSS");
    }
    /**
     * 
     *
     * Values: SECS_100_M,SECS_100_Y,MINS_KM,MINS_MILE,SECS_500_M
     */
    @JsonClass(generateAdapter = false)
    enum class PaceUnits(val value: kotlin.String) {
        @Json(name = "SECS_100M") SECS_100_M("SECS_100M"),
        @Json(name = "SECS_100Y") SECS_100_Y("SECS_100Y"),
        @Json(name = "MINS_KM") MINS_KM("MINS_KM"),
        @Json(name = "MINS_MILE") MINS_MILE("MINS_MILE"),
        @Json(name = "SECS_500M") SECS_500_M("SECS_500M");
    }
    /**
     * 
     *
     * Values: SWIM,RUN
     */
    @JsonClass(generateAdapter = false)
    enum class PaceLoadType(val value: kotlin.String) {
        @Json(name = "SWIM") SWIM("SWIM"),
        @Json(name = "RUN") RUN("RUN");
    }
    /**
     * 
     *
     * Values: NONE,STRAVA_RUN
     */
    @JsonClass(generateAdapter = false)
    enum class GapModel(val value: kotlin.String) {
        @Json(name = "NONE") NONE("NONE"),
        @Json(name = "STRAVA_RUN") STRAVA_RUN("STRAVA_RUN");
    }
    /**
     * 
     *
     * Values: NO,AUTO,YES
     */
    @JsonClass(generateAdapter = false)
    enum class ElevationCorrection(val value: kotlin.String) {
        @Json(name = "NO") NO("NO"),
        @Json(name = "AUTO") AUTO("AUTO"),
        @Json(name = "YES") YES("YES");
    }
    /**
     * 
     *
     * Values: POWER_HR_PACE,POWER_PACE_HR,HR_POWER_PACE,HR_PACE_POWER,PACE_POWER_HR,PACE_HR_POWER
     */
    @JsonClass(generateAdapter = false)
    enum class LoadOrder(val value: kotlin.String) {
        @Json(name = "POWER_HR_PACE") POWER_HR_PACE("POWER_HR_PACE"),
        @Json(name = "POWER_PACE_HR") POWER_PACE_HR("POWER_PACE_HR"),
        @Json(name = "HR_POWER_PACE") HR_POWER_PACE("HR_POWER_PACE"),
        @Json(name = "HR_PACE_POWER") HR_PACE_POWER("HR_PACE_POWER"),
        @Json(name = "PACE_POWER_HR") PACE_POWER_HR("PACE_POWER_HR"),
        @Json(name = "PACE_HR_POWER") PACE_HR_POWER("PACE_HR_POWER");
    }
    /**
     * 
     *
     * Values: POWER_HR_PACE,POWER_PACE_HR,HR_POWER_PACE,HR_PACE_POWER,PACE_POWER_HR,PACE_HR_POWER
     */
    @JsonClass(generateAdapter = false)
    enum class TizOrder(val value: kotlin.String) {
        @Json(name = "POWER_HR_PACE") POWER_HR_PACE("POWER_HR_PACE"),
        @Json(name = "POWER_PACE_HR") POWER_PACE_HR("POWER_PACE_HR"),
        @Json(name = "HR_POWER_PACE") HR_POWER_PACE("HR_POWER_PACE"),
        @Json(name = "HR_PACE_POWER") HR_PACE_POWER("HR_PACE_POWER"),
        @Json(name = "PACE_POWER_HR") PACE_POWER_HR("PACE_POWER_HR"),
        @Json(name = "PACE_HR_POWER") PACE_HR_POWER("PACE_HR_POWER");
    }
    /**
     * 
     *
     * Values: POWER_HR_PACE,POWER_PACE_HR,HR_POWER_PACE,HR_PACE_POWER,PACE_POWER_HR,PACE_HR_POWER
     */
    @JsonClass(generateAdapter = false)
    enum class WorkoutOrder(val value: kotlin.String) {
        @Json(name = "POWER_HR_PACE") POWER_HR_PACE("POWER_HR_PACE"),
        @Json(name = "POWER_PACE_HR") POWER_PACE_HR("POWER_PACE_HR"),
        @Json(name = "HR_POWER_PACE") HR_POWER_PACE("HR_POWER_PACE"),
        @Json(name = "HR_PACE_POWER") HR_PACE_POWER("HR_PACE_POWER"),
        @Json(name = "PACE_POWER_HR") PACE_POWER_HR("PACE_POWER_HR"),
        @Json(name = "PACE_HR_POWER") PACE_HR_POWER("PACE_HR_POWER");
    }
    /**
     * 
     *
     * Values: POWER_HR_PACE,POWER_PACE_HR,HR_POWER_PACE,HR_PACE_POWER,PACE_POWER_HR,PACE_HR_POWER
     */
    @JsonClass(generateAdapter = false)
    enum class IntervalDisplay(val value: kotlin.String) {
        @Json(name = "POWER_HR_PACE") POWER_HR_PACE("POWER_HR_PACE"),
        @Json(name = "POWER_PACE_HR") POWER_PACE_HR("POWER_PACE_HR"),
        @Json(name = "HR_POWER_PACE") HR_POWER_PACE("HR_POWER_PACE"),
        @Json(name = "HR_PACE_POWER") HR_PACE_POWER("HR_PACE_POWER"),
        @Json(name = "PACE_POWER_HR") PACE_POWER_HR("PACE_POWER_HR"),
        @Json(name = "PACE_HR_POWER") PACE_HR_POWER("PACE_HR_POWER");
    }
}

