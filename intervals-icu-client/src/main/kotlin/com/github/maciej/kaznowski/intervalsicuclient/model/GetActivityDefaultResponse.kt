/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.github.maciej.kaznowski.intervalsicuclient.model

import com.github.maciej.kaznowski.intervalsicuclient.model.Activity
import com.github.maciej.kaznowski.intervalsicuclient.model.ActivityWithIntervals
import com.github.maciej.kaznowski.intervalsicuclient.model.Attachment
import com.github.maciej.kaznowski.intervalsicuclient.model.HRRecovery
import com.github.maciej.kaznowski.intervalsicuclient.model.IcuAchievement
import com.github.maciej.kaznowski.intervalsicuclient.model.Ignore
import com.github.maciej.kaznowski.intervalsicuclient.model.Interval
import com.github.maciej.kaznowski.intervalsicuclient.model.IntervalGroup
import com.github.maciej.kaznowski.intervalsicuclient.model.StravaGear
import com.github.maciej.kaznowski.intervalsicuclient.model.ZoneTime

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id 
 * @param startDateLocal 
 * @param type 
 * @param icuIgnoreTime 
 * @param icuPmCp 
 * @param icuPmWPrime 
 * @param icuPmPMax 
 * @param icuPmFtp 
 * @param icuPmFtpSecs 
 * @param icuPmFtpWatts 
 * @param icuIgnorePower 
 * @param icuRollingCp 
 * @param icuRollingWPrime 
 * @param icuRollingPMax 
 * @param icuRollingFtp 
 * @param icuRollingFtpDelta 
 * @param icuTrainingLoad 
 * @param icuAtl 
 * @param icuCtl 
 * @param pairedEventId 
 * @param name 
 * @param description 
 * @param startDate 
 * @param distance 
 * @param icuDistance 
 * @param movingTime 
 * @param elapsedTime 
 * @param coastingTime 
 * @param totalElevationGain 
 * @param timezone 
 * @param trainer 
 * @param commute 
 * @param maxSpeed 
 * @param averageSpeed 
 * @param deviceWatts 
 * @param hasHeartrate 
 * @param maxHeartrate 
 * @param averageHeartrate 
 * @param averageCadence 
 * @param calories 
 * @param averageTemp 
 * @param minTemp 
 * @param maxTemp 
 * @param avgLrBalance 
 * @param gap 
 * @param gapModel 
 * @param useElevationCorrection 
 * @param race 
 * @param gear 
 * @param perceivedExertion 
 * @param deviceName 
 * @param powerMeter 
 * @param powerMeterSerial 
 * @param powerMeterBattery 
 * @param crankLength 
 * @param externalId 
 * @param fileSportIndex 
 * @param fileType 
 * @param icuAthleteId 
 * @param created 
 * @param icuSyncDate 
 * @param analyzed 
 * @param icuFtp 
 * @param icuWPrime 
 * @param thresholdPace 
 * @param icuHrZones 
 * @param paceZones 
 * @param lthr 
 * @param icuRestingHr 
 * @param icuWeight 
 * @param icuPowerZones 
 * @param icuSweetSpotMin 
 * @param icuSweetSpotMax 
 * @param icuPowerSpikeThreshold 
 * @param trimp 
 * @param icuWarmupTime 
 * @param icuCooldownTime 
 * @param icuChatId 
 * @param icuIgnoreHr 
 * @param ignoreVelocity 
 * @param ignorePace 
 * @param ignoreParts 
 * @param icuWeightedAvgWatts 
 * @param icuTrainingLoadData 
 * @param intervalSummary 
 * @param skylineChartBytes 
 * @param streamTypes 
 * @param hasSegments 
 * @param powerFieldNames 
 * @param powerField 
 * @param icuZoneTimes 
 * @param icuHrZoneTimes 
 * @param paceZoneTimes 
 * @param gapZoneTimes 
 * @param useGapZoneTimes 
 * @param tizOrder 
 * @param polarizationIndex 
 * @param icuAchievements 
 * @param icuIntervalsEdited 
 * @param lockIntervals 
 * @param icuLapCount 
 * @param icuJoules 
 * @param icuJoulesAboveFtp 
 * @param icuMaxWbalDepletion 
 * @param icuRecordingTime 
 * @param icuHrr 
 * @param icuSyncError 
 * @param icuColor 
 * @param icuPowerHrZ2 
 * @param icuPowerHrZ2Mins 
 * @param icuCadenceZ2 
 * @param icuRpe 
 * @param feel 
 * @param kgLifted 
 * @param decoupling 
 * @param icuMedianTimeDelta 
 * @param p30sExponent 
 * @param workoutShiftSecs 
 * @param stravaId 
 * @param lengths 
 * @param poolLength 
 * @param compliance 
 * @param source 
 * @param oauthClientId 
 * @param oauthClientName 
 * @param powerLoad 
 * @param hrLoad 
 * @param paceLoad 
 * @param hrLoadType 
 * @param paceLoadType 
 * @param tags 
 * @param attachments 
 * @param recordingStops 
 * @param pace 
 * @param athleteMaxHr 
 * @param group 
 * @param icuAverageWatts 
 * @param icuIntensity 
 * @param icuVariabilityIndex 
 * @param icuEfficiencyFactor 
 * @param icuPowerHr 
 * @param sessionRpe 
 * @param averageStride 
 * @param icuIntervals 
 * @param icuGroups 
 */
@JsonClass(generateAdapter = true)

data class GetActivityDefaultResponse (

    @Json(name = "id")
    val id: kotlin.String? = null,

    @Json(name = "start_date_local")
    val startDateLocal: kotlin.String? = null,

    @Json(name = "type")
    val type: kotlin.String? = null,

    @Json(name = "icu_ignore_time")
    val icuIgnoreTime: kotlin.Boolean? = null,

    @Json(name = "icu_pm_cp")
    val icuPmCp: kotlin.Int? = null,

    @Json(name = "icu_pm_w_prime")
    val icuPmWPrime: kotlin.Int? = null,

    @Json(name = "icu_pm_p_max")
    val icuPmPMax: kotlin.Int? = null,

    @Json(name = "icu_pm_ftp")
    val icuPmFtp: kotlin.Int? = null,

    @Json(name = "icu_pm_ftp_secs")
    val icuPmFtpSecs: kotlin.Int? = null,

    @Json(name = "icu_pm_ftp_watts")
    val icuPmFtpWatts: kotlin.Int? = null,

    @Json(name = "icu_ignore_power")
    val icuIgnorePower: kotlin.Boolean? = null,

    @Json(name = "icu_rolling_cp")
    val icuRollingCp: kotlin.Float? = null,

    @Json(name = "icu_rolling_w_prime")
    val icuRollingWPrime: kotlin.Float? = null,

    @Json(name = "icu_rolling_p_max")
    val icuRollingPMax: kotlin.Float? = null,

    @Json(name = "icu_rolling_ftp")
    val icuRollingFtp: kotlin.Int? = null,

    @Json(name = "icu_rolling_ftp_delta")
    val icuRollingFtpDelta: kotlin.Int? = null,

    @Json(name = "icu_training_load")
    val icuTrainingLoad: kotlin.Int? = null,

    @Json(name = "icu_atl")
    val icuAtl: kotlin.Float? = null,

    @Json(name = "icu_ctl")
    val icuCtl: kotlin.Float? = null,

    @Json(name = "paired_event_id")
    val pairedEventId: kotlin.Int? = null,

    @Json(name = "name")
    val name: kotlin.String? = null,

    @Json(name = "description")
    val description: kotlin.String? = null,

    @Json(name = "start_date")
    val startDate: kotlin.String? = null,

    @Json(name = "distance")
    val distance: kotlin.Float? = null,

    @Json(name = "icu_distance")
    val icuDistance: kotlin.Float? = null,

    @Json(name = "moving_time")
    val movingTime: kotlin.Int? = null,

    @Json(name = "elapsed_time")
    val elapsedTime: kotlin.Int? = null,

    @Json(name = "coasting_time")
    val coastingTime: kotlin.Int? = null,

    @Json(name = "total_elevation_gain")
    val totalElevationGain: kotlin.Float? = null,

    @Json(name = "timezone")
    val timezone: kotlin.String? = null,

    @Json(name = "trainer")
    val trainer: kotlin.Boolean? = null,

    @Json(name = "commute")
    val commute: kotlin.Boolean? = null,

    @Json(name = "max_speed")
    val maxSpeed: kotlin.Float? = null,

    @Json(name = "average_speed")
    val averageSpeed: kotlin.Float? = null,

    @Json(name = "device_watts")
    val deviceWatts: kotlin.Boolean? = null,

    @Json(name = "has_heartrate")
    val hasHeartrate: kotlin.Boolean? = null,

    @Json(name = "max_heartrate")
    val maxHeartrate: kotlin.Int? = null,

    @Json(name = "average_heartrate")
    val averageHeartrate: kotlin.Int? = null,

    @Json(name = "average_cadence")
    val averageCadence: kotlin.Float? = null,

    @Json(name = "calories")
    val calories: kotlin.Int? = null,

    @Json(name = "average_temp")
    val averageTemp: kotlin.Float? = null,

    @Json(name = "min_temp")
    val minTemp: kotlin.Int? = null,

    @Json(name = "max_temp")
    val maxTemp: kotlin.Int? = null,

    @Json(name = "avg_lr_balance")
    val avgLrBalance: kotlin.Float? = null,

    @Json(name = "gap")
    val gap: kotlin.Float? = null,

    @Json(name = "gap_model")
    val gapModel: GetActivityDefaultResponse.GapModel? = null,

    @Json(name = "use_elevation_correction")
    val useElevationCorrection: kotlin.Boolean? = null,

    @Json(name = "race")
    val race: kotlin.Boolean? = null,

    @Json(name = "gear")
    val gear: StravaGear? = null,

    @Json(name = "perceived_exertion")
    val perceivedExertion: kotlin.Float? = null,

    @Json(name = "device_name")
    val deviceName: kotlin.String? = null,

    @Json(name = "power_meter")
    val powerMeter: kotlin.String? = null,

    @Json(name = "power_meter_serial")
    val powerMeterSerial: kotlin.String? = null,

    @Json(name = "power_meter_battery")
    val powerMeterBattery: kotlin.String? = null,

    @Json(name = "crank_length")
    val crankLength: kotlin.Float? = null,

    @Json(name = "external_id")
    val externalId: kotlin.String? = null,

    @Json(name = "file_sport_index")
    val fileSportIndex: kotlin.Int? = null,

    @Json(name = "file_type")
    val fileType: kotlin.String? = null,

    @Json(name = "icu_athlete_id")
    val icuAthleteId: kotlin.String? = null,

    @Json(name = "created")
    val created: java.time.OffsetDateTime? = null,

    @Json(name = "icu_sync_date")
    val icuSyncDate: java.time.OffsetDateTime? = null,

    @Json(name = "analyzed")
    val analyzed: java.time.OffsetDateTime? = null,

    @Json(name = "icu_ftp")
    val icuFtp: kotlin.Int? = null,

    @Json(name = "icu_w_prime")
    val icuWPrime: kotlin.Int? = null,

    @Json(name = "threshold_pace")
    val thresholdPace: kotlin.Float? = null,

    @Json(name = "icu_hr_zones")
    val icuHrZones: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "pace_zones")
    val paceZones: kotlin.collections.List<kotlin.Float>? = null,

    @Json(name = "lthr")
    val lthr: kotlin.Int? = null,

    @Json(name = "icu_resting_hr")
    val icuRestingHr: kotlin.Int? = null,

    @Json(name = "icu_weight")
    val icuWeight: kotlin.Float? = null,

    @Json(name = "icu_power_zones")
    val icuPowerZones: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "icu_sweet_spot_min")
    val icuSweetSpotMin: kotlin.Int? = null,

    @Json(name = "icu_sweet_spot_max")
    val icuSweetSpotMax: kotlin.Int? = null,

    @Json(name = "icu_power_spike_threshold")
    val icuPowerSpikeThreshold: kotlin.Int? = null,

    @Json(name = "trimp")
    val trimp: kotlin.Float? = null,

    @Json(name = "icu_warmup_time")
    val icuWarmupTime: kotlin.Int? = null,

    @Json(name = "icu_cooldown_time")
    val icuCooldownTime: kotlin.Int? = null,

    @Json(name = "icu_chat_id")
    val icuChatId: kotlin.Int? = null,

    @Json(name = "icu_ignore_hr")
    val icuIgnoreHr: kotlin.Boolean? = null,

    @Json(name = "ignore_velocity")
    val ignoreVelocity: kotlin.Boolean? = null,

    @Json(name = "ignore_pace")
    val ignorePace: kotlin.Boolean? = null,

    @Json(name = "ignore_parts")
    val ignoreParts: kotlin.collections.List<Ignore>? = null,

    @Json(name = "icu_weighted_avg_watts")
    val icuWeightedAvgWatts: kotlin.Int? = null,

    @Json(name = "icu_training_load_data")
    val icuTrainingLoadData: kotlin.Int? = null,

    @Json(name = "interval_summary")
    val intervalSummary: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "skyline_chart_bytes")
    val skylineChartBytes: kotlin.collections.List<kotlin.ByteArray>? = null,

    @Json(name = "stream_types")
    val streamTypes: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "has_segments")
    val hasSegments: kotlin.Boolean? = null,

    @Json(name = "power_field_names")
    val powerFieldNames: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "power_field")
    val powerField: kotlin.String? = null,

    @Json(name = "icu_zone_times")
    val icuZoneTimes: kotlin.collections.List<ZoneTime>? = null,

    @Json(name = "icu_hr_zone_times")
    val icuHrZoneTimes: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "pace_zone_times")
    val paceZoneTimes: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "gap_zone_times")
    val gapZoneTimes: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "use_gap_zone_times")
    val useGapZoneTimes: kotlin.Boolean? = null,

    @Json(name = "tiz_order")
    val tizOrder: GetActivityDefaultResponse.TizOrder? = null,

    @Json(name = "polarization_index")
    val polarizationIndex: kotlin.Float? = null,

    @Json(name = "icu_achievements")
    val icuAchievements: kotlin.collections.List<IcuAchievement>? = null,

    @Json(name = "icu_intervals_edited")
    val icuIntervalsEdited: kotlin.Boolean? = null,

    @Json(name = "lock_intervals")
    val lockIntervals: kotlin.Boolean? = null,

    @Json(name = "icu_lap_count")
    val icuLapCount: kotlin.Int? = null,

    @Json(name = "icu_joules")
    val icuJoules: kotlin.Int? = null,

    @Json(name = "icu_joules_above_ftp")
    val icuJoulesAboveFtp: kotlin.Int? = null,

    @Json(name = "icu_max_wbal_depletion")
    val icuMaxWbalDepletion: kotlin.Int? = null,

    @Json(name = "icu_recording_time")
    val icuRecordingTime: kotlin.Int? = null,

    @Json(name = "icu_hrr")
    val icuHrr: HRRecovery? = null,

    @Json(name = "icu_sync_error")
    val icuSyncError: kotlin.String? = null,

    @Json(name = "icu_color")
    val icuColor: kotlin.String? = null,

    @Json(name = "icu_power_hr_z2")
    val icuPowerHrZ2: kotlin.Float? = null,

    @Json(name = "icu_power_hr_z2_mins")
    val icuPowerHrZ2Mins: kotlin.Int? = null,

    @Json(name = "icu_cadence_z2")
    val icuCadenceZ2: kotlin.Int? = null,

    @Json(name = "icu_rpe")
    val icuRpe: kotlin.Int? = null,

    @Json(name = "feel")
    val feel: kotlin.Int? = null,

    @Json(name = "kg_lifted")
    val kgLifted: kotlin.Float? = null,

    @Json(name = "decoupling")
    val decoupling: kotlin.Float? = null,

    @Json(name = "icu_median_time_delta")
    val icuMedianTimeDelta: kotlin.Int? = null,

    @Json(name = "p30s_exponent")
    val p30sExponent: kotlin.Float? = null,

    @Json(name = "workout_shift_secs")
    val workoutShiftSecs: kotlin.Int? = null,

    @Json(name = "strava_id")
    val stravaId: kotlin.String? = null,

    @Json(name = "lengths")
    val lengths: kotlin.Int? = null,

    @Json(name = "pool_length")
    val poolLength: kotlin.Float? = null,

    @Json(name = "compliance")
    val compliance: kotlin.Float? = null,

    @Json(name = "source")
    val source: GetActivityDefaultResponse.Source? = null,

    @Json(name = "oauth_client_id")
    val oauthClientId: kotlin.Int? = null,

    @Json(name = "oauth_client_name")
    val oauthClientName: kotlin.String? = null,

    @Json(name = "power_load")
    val powerLoad: kotlin.Int? = null,

    @Json(name = "hr_load")
    val hrLoad: kotlin.Int? = null,

    @Json(name = "pace_load")
    val paceLoad: kotlin.Int? = null,

    @Json(name = "hr_load_type")
    val hrLoadType: GetActivityDefaultResponse.HrLoadType? = null,

    @Json(name = "pace_load_type")
    val paceLoadType: GetActivityDefaultResponse.PaceLoadType? = null,

    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>? = null,

    @Json(name = "attachments")
    val attachments: kotlin.collections.List<Attachment>? = null,

    @Json(name = "recording_stops")
    val recordingStops: kotlin.collections.List<kotlin.Int>? = null,

    @Json(name = "pace")
    val pace: kotlin.Float? = null,

    @Json(name = "athlete_max_hr")
    val athleteMaxHr: kotlin.Int? = null,

    @Json(name = "group")
    val group: kotlin.String? = null,

    @Json(name = "icu_average_watts")
    val icuAverageWatts: kotlin.Int? = null,

    @Json(name = "icu_intensity")
    val icuIntensity: kotlin.Float? = null,

    @Json(name = "icu_variability_index")
    val icuVariabilityIndex: kotlin.Float? = null,

    @Json(name = "icu_efficiency_factor")
    val icuEfficiencyFactor: kotlin.Float? = null,

    @Json(name = "icu_power_hr")
    val icuPowerHr: kotlin.Float? = null,

    @Json(name = "session_rpe")
    val sessionRpe: kotlin.Int? = null,

    @Json(name = "average_stride")
    val averageStride: kotlin.Float? = null,

    @Json(name = "icu_intervals")
    val icuIntervals: kotlin.collections.List<Interval>? = null,

    @Json(name = "icu_groups")
    val icuGroups: kotlin.collections.List<IntervalGroup>? = null

) {

    /**
     * 
     *
     * Values: NONE,STRAVA_RUN
     */
    @JsonClass(generateAdapter = false)
    enum class GapModel(val value: kotlin.String) {
        @Json(name = "NONE") NONE("NONE"),
        @Json(name = "STRAVA_RUN") STRAVA_RUN("STRAVA_RUN");
    }
    /**
     * 
     *
     * Values: POWER_HR_PACE,POWER_PACE_HR,HR_POWER_PACE,HR_PACE_POWER,PACE_POWER_HR,PACE_HR_POWER
     */
    @JsonClass(generateAdapter = false)
    enum class TizOrder(val value: kotlin.String) {
        @Json(name = "POWER_HR_PACE") POWER_HR_PACE("POWER_HR_PACE"),
        @Json(name = "POWER_PACE_HR") POWER_PACE_HR("POWER_PACE_HR"),
        @Json(name = "HR_POWER_PACE") HR_POWER_PACE("HR_POWER_PACE"),
        @Json(name = "HR_PACE_POWER") HR_PACE_POWER("HR_PACE_POWER"),
        @Json(name = "PACE_POWER_HR") PACE_POWER_HR("PACE_POWER_HR"),
        @Json(name = "PACE_HR_POWER") PACE_HR_POWER("PACE_HR_POWER");
    }
    /**
     * 
     *
     * Values: STRAVA,UPLOAD,MANUAL,GARMIN_CONNECT,OAUTH_CLIENT,DROPBOX,POLAR,SUUNTO,COROS,WAHOO
     */
    @JsonClass(generateAdapter = false)
    enum class Source(val value: kotlin.String) {
        @Json(name = "STRAVA") STRAVA("STRAVA"),
        @Json(name = "UPLOAD") UPLOAD("UPLOAD"),
        @Json(name = "MANUAL") MANUAL("MANUAL"),
        @Json(name = "GARMIN_CONNECT") GARMIN_CONNECT("GARMIN_CONNECT"),
        @Json(name = "OAUTH_CLIENT") OAUTH_CLIENT("OAUTH_CLIENT"),
        @Json(name = "DROPBOX") DROPBOX("DROPBOX"),
        @Json(name = "POLAR") POLAR("POLAR"),
        @Json(name = "SUUNTO") SUUNTO("SUUNTO"),
        @Json(name = "COROS") COROS("COROS"),
        @Json(name = "WAHOO") WAHOO("WAHOO");
    }
    /**
     * 
     *
     * Values: AVG_HR,HR_ZONES,HRSS
     */
    @JsonClass(generateAdapter = false)
    enum class HrLoadType(val value: kotlin.String) {
        @Json(name = "AVG_HR") AVG_HR("AVG_HR"),
        @Json(name = "HR_ZONES") HR_ZONES("HR_ZONES"),
        @Json(name = "HRSS") HRSS("HRSS");
    }
    /**
     * 
     *
     * Values: SWIM,RUN
     */
    @JsonClass(generateAdapter = false)
    enum class PaceLoadType(val value: kotlin.String) {
        @Json(name = "SWIM") SWIM("SWIM"),
        @Json(name = "RUN") RUN("RUN");
    }
}

